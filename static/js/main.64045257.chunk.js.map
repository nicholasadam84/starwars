{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","containers/ErrorBoundary.js","components/Card.js","components/HeroCard.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Card","name","model","url","divClick","onClick","data-hero_url","HeroCard","hero","backClick","console","log","starship_class","manufacturer","cost_in_credits","length","crew","passengers","max_atmosphering_speed","hyperdrive_rating","MGLT","cargo_capacity","consumables","films","pilots","CardList","handleDivClick","event","heroURL","currentTarget","dataset","hero_url","showHero","handleBackClick","heroData","unfilteredStarships","filter","starship","includes","cardArray","starships","map","ship","i","key","App","onSearchChange","searchfield","target","value","starshipsArray","Promise","all","fetch","then","response","json","data","results","push","filteredStarships","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64045257.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className={`pa2`}>\r\n            <input \r\n                className='pa3 ba b--blue bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search starships'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n       <div style={{overflowY: 'scroll', height: '800px'}}>\r\n           {props.children}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //React Lifecycle Hook similar to try-catch block in Javascript\r\n    //Receives parameters error and info \r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. There was an error.</h1>\r\n        }\r\n        return this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({ name, model, url, divClick }) => {\r\n\r\n    return (\r\n        <div className={`bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5`} onClick={divClick} data-hero_url={url}>\r\n            <h3 className={`tc`}>{name}</h3>\r\n            <p>{model}</p>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './HeroCard.css'\r\n\r\nconst HeroCard = ({ hero, backClick }) => {\r\n    hero = hero[0];\r\n    console.log(hero);\r\n\r\n            return (\r\n        <div className={`bg-light-blue dib br3 pa3 ma2 bw2 shadow-5`}>\r\n            <button className={`fl`}\r\n               onClick={backClick}\r\n               > \r\n               Back\r\n            </button>\r\n            <h3 className={`tc`}>{hero.name}</h3>\r\n            <p><span>Model:&nbsp;</span>{hero.model}</p>\r\n            <p><span>Class:&nbsp;</span>{hero.starship_class}</p>\r\n            <p><span>Manufacturer:&nbsp;</span>{hero.manufacturer}</p>\r\n            <p><span>Cost (in credits):&nbsp;</span>{hero.cost_in_credits}</p>\r\n            <p><span>Length (in meters):&nbsp;</span>{hero.length}</p>\r\n            <p><span>Essential Crew:&nbsp;</span>{hero.crew}</p>\r\n            <p><span>Passengers:&nbsp;</span>{hero.passengers}</p>\r\n            <p><span>Max Speed (atomspheric):&nbsp;</span>{hero.max_atmosphering_speed}</p>\r\n            <p><span>Hyperdrive Class:&nbsp;</span>{hero.hyperdrive_rating}</p>\r\n            <p><span>Max Megalights (per hour):&nbsp;</span>{hero.MGLT}</p>\r\n            <p><span>Cargo Capacity (in kilograms):&nbsp;</span>{hero.cargo_capacity}</p>\r\n            <p><span>Consumable Resupplly Max Time:&nbsp;</span>{hero.consumables}</p>\r\n            <p><span>Films:&nbsp;</span>{hero.films}</p>\r\n            <p><span>Pilots:&nbsp;</span>{hero.pilots}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HeroCard;","import React, { Component } from 'react';\r\nimport Card from './Card';\r\nimport HeroCard from './HeroCard';\r\n\r\nclass CardList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            showHero: false,\r\n            heroURL: ''\r\n        }\r\n    }\r\n    \r\n    handleDivClick = (event) => {\r\n        //console.log('handleDivClick', event.currentTarget.dataset.hero_url);\r\n        this.setState({ heroURL: event.currentTarget.dataset.hero_url });\r\n        this.setState({ showHero: true });\r\n    }\r\n\r\n    handleBackClick = (event) => {\r\n        this.setState({ showHero: false });\r\n    }\r\n    \r\n    render() {\r\n        const heroData = this.props.unfilteredStarships.filter(starship => {\r\n            return starship.url.includes(this.state.heroURL)\r\n        })\r\n\r\n        if (this.state.showHero) {\r\n            return (\r\n                <div>\r\n                    <HeroCard \r\n                        hero={heroData}\r\n                        backClick={this.handleBackClick}\r\n                        unfilteredStarships={this.props.unfilteredStarships}\r\n                    />\r\n                </div>\r\n            )\r\n        } else {\r\n            const cardArray = this.props.starships.map((ship, i) => {\r\n                return <Card \r\n                            key={i} \r\n                            name={this.props.starships[i].name} \r\n                            model={this.props.starships[i].model}\r\n                            url={this.props.starships[i].url}\r\n                            divClick={this.handleDivClick}\r\n                        />\r\n            });\r\n            \r\n            return (\r\n                <div>\r\n                    {cardArray}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../containers/ErrorBoundary';\r\nimport CardList from '../components/CardList';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n      super()\r\n      this.state = {\r\n        searchfield: '',  \r\n        starships: [],\r\n      }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const starshipsArray = [];\r\n    //TO-DO: Iterate through these URLs until data.next !== null (the next: property is not null)\r\n    const urls = [\r\n        'https://swapi.co/api/starships/?page=2',\r\n        'https://swapi.co/api/starships/?page=1',\r\n        'https://swapi.co/api/starships/?page=3',\r\n        'https://swapi.co/api/starships/?page=4',\r\n    ];\r\n    Promise.all(urls.map(url => {\r\n        return fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                for (const ship of data.results) {\r\n                    starshipsArray.push(ship);\r\n                }\r\n                this.setState({ starships: starshipsArray });\r\n            })\r\n    }))  \r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value});\r\n  }\r\n\r\n  render () {\r\n    const { starships, searchfield } = this.state;\r\n    const filteredStarships = starships.filter(starship => {\r\n      return starship.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    return (\r\n      <div className={`tc`}>\r\n        <h1>Star Wars Starship Facts</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList unfilteredStarships={starships} starships={filteredStarships} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}